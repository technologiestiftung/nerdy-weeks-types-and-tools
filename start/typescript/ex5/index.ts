/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable prefer-const */
// types and interfaces
//
// ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñà‚ñà   ‚ñà‚ñà‚ñì ‚ñà‚ñà‚ñì‚ñà‚ñà‚ñà  ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà
// ‚ñì  ‚ñà‚ñà‚ñí ‚ñì‚ñí ‚ñí‚ñà‚ñà  ‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà‚ñë  ‚ñà‚ñà‚ñí‚ñì‚ñà   ‚ñÄ
// ‚ñí ‚ñì‚ñà‚ñà‚ñë ‚ñí‚ñë  ‚ñí‚ñà‚ñà ‚ñà‚ñà‚ñë‚ñì‚ñà‚ñà‚ñë ‚ñà‚ñà‚ñì‚ñí‚ñí‚ñà‚ñà‚ñà
// ‚ñë ‚ñì‚ñà‚ñà‚ñì ‚ñë   ‚ñë ‚ñê‚ñà‚ñà‚ñì‚ñë‚ñí‚ñà‚ñà‚ñÑ‚ñà‚ñì‚ñí ‚ñí‚ñí‚ñì‚ñà  ‚ñÑ
//   ‚ñí‚ñà‚ñà‚ñí ‚ñë   ‚ñë ‚ñà‚ñà‚ñí‚ñì‚ñë‚ñí‚ñà‚ñà‚ñí ‚ñë  ‚ñë‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí
//   ‚ñí ‚ñë‚ñë      ‚ñà‚ñà‚ñí‚ñí‚ñí ‚ñí‚ñì‚ñí‚ñë ‚ñë  ‚ñë‚ñë‚ñë ‚ñí‚ñë ‚ñë
//     ‚ñë     ‚ñì‚ñà‚ñà ‚ñë‚ñí‚ñë ‚ñë‚ñí ‚ñë      ‚ñë ‚ñë  ‚ñë
//   ‚ñë       ‚ñí ‚ñí ‚ñë‚ñë  ‚ñë‚ñë          ‚ñë
//           ‚ñë ‚ñë                 ‚ñë  ‚ñë
//           ‚ñë ‚ñë
// types are like a redefinition for easier handling
/*
{
  let possibleNames: "Jabba" | "Leia" | "Luke";
  // possibleNames = "Han";// this does not work
  possibleNames = "Jabba";
}
{
  // Can also be written like this
  type Names = "Jabba" | "Leia" | "Luke";
  let possibleNames: Names;
  possibleNames = "Jabba";
}
*/

//  ‚ñà‚ñà‚ñì ‚ñà‚ñà‚ñà‚ñÑ    ‚ñà ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñÄ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñÑ‚ñÑ‚ñÑ       ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñÑ  ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà
// ‚ñì‚ñà‚ñà‚ñí ‚ñà‚ñà ‚ñÄ‚ñà   ‚ñà ‚ñì  ‚ñà‚ñà‚ñí ‚ñì‚ñí‚ñì‚ñà   ‚ñÄ ‚ñì‚ñà‚ñà ‚ñí ‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà   ‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñÑ    ‚ñí‚ñà‚ñà‚ñÄ ‚ñÄ‚ñà  ‚ñì‚ñà   ‚ñÄ
// ‚ñí‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà  ‚ñÄ‚ñà ‚ñà‚ñà‚ñí‚ñí ‚ñì‚ñà‚ñà‚ñë ‚ñí‚ñë‚ñí‚ñà‚ñà‚ñà   ‚ñì‚ñà‚ñà ‚ñë‚ñÑ‚ñà ‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà ‚ñë‚ñí‚ñà‚ñà  ‚ñÄ‚ñà‚ñÑ  ‚ñí‚ñì‚ñà    ‚ñÑ ‚ñí‚ñà‚ñà‚ñà
// ‚ñë‚ñà‚ñà‚ñë‚ñì‚ñà‚ñà‚ñí  ‚ñê‚ñå‚ñà‚ñà‚ñí‚ñë ‚ñì‚ñà‚ñà‚ñì ‚ñë ‚ñí‚ñì‚ñà  ‚ñÑ ‚ñí‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ  ‚ñë‚ñì‚ñà‚ñí  ‚ñë‚ñë‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà ‚ñí‚ñì‚ñì‚ñÑ ‚ñÑ‚ñà‚ñà‚ñí‚ñí‚ñì‚ñà  ‚ñÑ
// ‚ñë‚ñà‚ñà‚ñë‚ñí‚ñà‚ñà‚ñë   ‚ñì‚ñà‚ñà‚ñë  ‚ñí‚ñà‚ñà‚ñí ‚ñë ‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñë‚ñà‚ñà‚ñì ‚ñí‚ñà‚ñà‚ñí‚ñë‚ñí‚ñà‚ñë    ‚ñì‚ñà   ‚ñì‚ñà‚ñà‚ñí‚ñí ‚ñì‚ñà‚ñà‚ñà‚ñÄ ‚ñë‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí
// ‚ñë‚ñì  ‚ñë ‚ñí‚ñë   ‚ñí ‚ñí   ‚ñí ‚ñë‚ñë   ‚ñë‚ñë ‚ñí‚ñë ‚ñë‚ñë ‚ñí‚ñì ‚ñë‚ñí‚ñì‚ñë ‚ñí ‚ñë    ‚ñí‚ñí   ‚ñì‚ñí‚ñà‚ñë‚ñë ‚ñë‚ñí ‚ñí  ‚ñë‚ñë‚ñë ‚ñí‚ñë ‚ñë
//  ‚ñí ‚ñë‚ñë ‚ñë‚ñë   ‚ñë ‚ñí‚ñë    ‚ñë     ‚ñë ‚ñë  ‚ñë  ‚ñë‚ñí ‚ñë ‚ñí‚ñë ‚ñë       ‚ñí   ‚ñí‚ñí ‚ñë  ‚ñë  ‚ñí    ‚ñë ‚ñë  ‚ñë
//  ‚ñí ‚ñë   ‚ñë   ‚ñë ‚ñë   ‚ñë         ‚ñë     ‚ñë‚ñë   ‚ñë  ‚ñë ‚ñë     ‚ñë   ‚ñí   ‚ñë           ‚ñë
//  ‚ñë           ‚ñë             ‚ñë  ‚ñë   ‚ñë                  ‚ñë  ‚ñë‚ñë ‚ñë         ‚ñë  ‚ñë
//                                                          ‚ñë
// you can understand interfaces as a blueprint for an object
/*
{
  interface User {
    firstName: string;
    lastName: string;
    userName?: string; // ? makes it optional
  }

  const you: User = { firstName: "Luke", lastName: "Skywalker" };
  you.userName = "LaserLover42";
  interface SuperUser extends User {
    knowsSudo: boolean;
  }

  const me: SuperUser = { ...you, knowsSudo: true };
}
*/

// Lets get nuts with it interfaces
// its a little stupid but‚Ä¶
/*
{
  interface Thing {
    name: string;
  }

  interface Foo {
    log(): void;
  }

  class Thong implements Thing {
    constructor(public name: string = "Bantha Pudo") {}
  }

  class Thung extends Thong implements Foo {
    log(): void {
      console.log(this.name);
    }
  }
  const what = new Thung();
  what.log();
}
*/

// üìù First excersise 10-15 minutes

// Write an interface for
// an animal as a abstract layout
// and then for two specific animal like
//
// - mammal
// or
// - insect
// or
// - fish
// or
// - ...
// what do they have in common?
// What properties can they share?
//  which are specifc for them?
